#!/usr/bin/env python# -*- coding: utf-8 -*-from etasdk import *'''期货策略：买卖策略本策略是一个简单的期货买卖策略，主要是体现期货简单买卖回测标的：沪深300主力合约（IFZ0.CF）回测周期：20180101-20181229撮合周期：5分钟K更多详情请看帮助文档：http://quant.upchina.com/doc/first.html'''# 必要 ：整个回测/模拟/实盘前要做的操作def onInitialize(api):    # 必要：设置标的池，支持多级别的选择，提高数据缓存效率    api.setRequireData(instsets=["IF.PRD"], symbols=["IFZ0.CF"],fields=[], bars=[(ETimeSpan.MIN_5,100)])    # 使用onHandleData时必须设置，如不设置则默认只响应onBar    api.setGroupMode(timeOutMs=10000, onlyGroup=False)    # 非必要：设计模拟盘Timer函数的定时回调，回测环境下无效，不调用默认为5000毫秒    api.setTimerCycle(60000)# 必要：每个交易日回测/模拟/实盘前要做的操作def onBeforeMarketOpen(api, trade_date):    trade_date = api.getCurrTradeDate()     # 获得当前交易日期    api.futures_code = api.getContinuousSymbol("IFZ0.CF", trade_date)     #获得当前交易日IF主力合约代码    # 必要：获取当前交易日需关注的合约    symbolPool = api.getSymbolPool()    # 必要：关注，为后续相应行情onBar、onHandleData或者onTick等函数做准备    api.setFocusSymbols(api.futures_code)# 必要：每天回测/交易 策略 可选择两种方式  onbar/onHandleData# 策略逻辑：如果价格低于前一日收盘价的3%则开空，止盈5%止损3%def onHandleData(api,timeExch):    trade_date = api.getCurrTradeDate()    symbolpositions = api.getSymbolPositions()  # 获取持仓标的信息    bars = api.getBarsHistory(symbol=api.futures_code, timeSpan=ETimeSpan.MIN_5, count=1,                              priceMode=EPriceMode.FORMER, df=True)     # 获得合约数据    factor = bars['preClose'].values / bars['open'].values  #当前开盘价与昨日收盘价之比    if symbolpositions:  # 如果有持仓        if api.futures_code == symbolpositions[0].symbol:  #当前持仓为主力合约            if symbolpositions[0].posHigh / symbolpositions[0].posPrice > 1.03 or symbolpositions[0].posLow / symbolpositions[0].posPrice < 0.95:  # 止盈5%止损3%                    # 平仓                    LOG.INFO(trade_date, "target position zero!") #录入日志                    api.targetPosition(symbol=symbolpositions[0].symbol, qty=0, positionSide=EPositionSide.SHORT)  # 卖出 ，symbol = 持仓标的，数量变为0        else: #当前持仓非主力合约 则换仓为主力合约            LOG.INFO(trade_date,symbolpositions[0].symbol,"换合约",api.futures_code,)            api.targetPosition(symbol=symbolpositions[0].symbol, qty=0, positionSide=EPositionSide.SHORT)            api.targetPosition(symbol=api.futures_code, qty=2,positionSide=EPositionSide.SHORT)    else:        if factor < 0.97:            LOG.INFO(trade_date, "target position 2")  # 非必要： 输出日志            api.targetPosition(symbol=api.futures_code, qty=2,                               positionSide=EPositionSide.SHORT)  # 买入 symbol = 选中标的开空，直至持仓数达2手# 定时器，模拟盘响应；回测时可忽略def onTimer(api):    pass# 策略终止时响应；运行终止时会调用一次,exitInfo返回值为终止消息def onTerminate(api, exitInfo):    LOG.INFO("***************onTerminate*********") # 输出日志