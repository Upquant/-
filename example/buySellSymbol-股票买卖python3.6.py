#!/usr/bin/env python# -*- coding: utf-8 -*-from etasdk import *'''股票策略：买卖策略本策略是一个简单的买卖策略，主要是体现如何下单的。当没有持仓时就进行买入操作，当有持仓时，就进行卖出平仓操作回测标的：平安银行（000001.CS）回测周期：20180702-20181101撮合周期：日K更多详情请看帮助文档：http://quant.upchina.com/doc/first.html'''if __name__ == '__main__':    # 读取配置文件并启动策略    config = {        "host": "120.55.22.60",        "port": 80,        "user": "SDK-User",         # Web端：点击量化平台右上角用户名可查看填写        "token": "SDK-Token",          # Web端：点击量化平台右上角用户名可查看填写        "strategy_name": "buySellSymbol",   # Web端：策略名称        "console": 0,        "loglevel": "ERROR",         # 显示日志级别，具体可查看帮助文档        "instance_id": "20190222-113322-609-001BI",    # Web端：回测记录中本策略的回测ID,点击复制ID,粘贴此处即可        # 初始化参数        "initialize": {            # symbols里设置单个股票或者其他有效的标的            # symbol_sets里设置标的集合，如此处的IF.PRD指的就是IF品种的所有标准合约，不包含IFZ0.CF和IFZ1.CF            # 注：symbols和symbol_sets不能全部为空            'symbols': ['000001.CS'],            # fields缓存的因子            # 'fields': ['FUT_TRADE_RANK', 'FUT_SHORT_RANK', 'FUT_LONG_RANK', 'STK_HOLD_DET', 'STK_HOLD_STAT', 'ST_STA','LIST_STA', 'TRADE_STA', 'NET_PROFIT', 'PB', 'PE', 'PS', 'PE_TTM'],            # 必填：设置所需k线类型，interval可以选取1分钟，5分钟，15分钟，30分钟，60分钟，日k，Tick级别，count为提前缓存的数目            'prepared_bars': [{'interval': ETimeSpan.DAY_1, 'count': 60}],            # 选填：设置撮合参数 interval为撮合周期，time_ranges为日内撮合时间段，将只在指定时间段以interval周期回调on_bar或on_handle_date            'match_param': {                'interval': ETimeSpan.DAY_1,                # 'time_ranges': [('12:00', '14:45'), ('10:10', '11:00')]            },            'mode': 'both',                       # 选填：为group_only，则只响应on_handle_data；为single_only，则只响应on_bar；为both，则两个回调同时响应            'commission': 0.0002,                       # 选填：设置手续费            # 选填：仅回测生效的项，不设置时以web页面上的设置为准            'backtest': {                'start_date': 20180702,                 # 回测开始日期                'end_date': 20181101,                   # 回测结束日期                'slippage': 1,                          # 设置滑点,取值为整数,标的价格浮动最小单位值的整数倍                # 设置账户初始资金                'cash': {                    'CS': 1000000,                            # 设置股票账户资金                    'CF': 0                      # 设置期货账户资金                }            },            # 选填：仅模拟盘/实盘生效的项            'realtime': {                'pre_market_time': '8:50',            # 设置开盘前回调on_before_market_open响应事件时间，默认为web页面上设置的时间                'closing_time': '14:55',               # 设置收盘前最后一次回调on_bar或on_handle_data响应事件时间，默认为web页面上设置的时间                'group_timeout': 10000,                # 设置group模式下的组播，等待多少ms则强制响应，默认为5000ms                'timer_cycle': 60000                   # 设置onTimer响应时间(ms), 为0则不响应onTimer，默认情况下不回调onTimer            }        }    }    etasdk.load_config_json(config).start()# 必要：每个交易日回测/模拟/实盘前要做的操作def on_before_market_open(api, date_now):    # 必要：获取当个交易日需关注的股票    # 设置今天关注的股票，如果股票池中只有一只股票，则全部关注即可；股票池中股票过多时，需要先选股在设置部分关注以提高运行效率    api.context.pool.focus = api.context.pool.all# 必要：每天回测/交易 策略 两种方式回调  on_bar/on_handle_data# 用日K做回测，所以每天只会进入一次，收盘时响应此函数# 策略逻辑：第一天买入，第二天卖出；判断逻辑，如果当前有仓位，则平仓，如果当前没有仓位，则买入def on_bar(api, bar):    symbol_positions = api.get_symbol_positions()  # 获取持仓标的信息    if symbol_positions:  # 如果持仓数大于0        # 平仓        log.info("target position zero!")        api.target_position(symbol=bar.symbol, qty=0)  # 卖出 ，symbol = 选中标的，数量变为0    else:        # 市价下单1000股        log.info("target position 1000!")        api.target_position(symbol=bar.symbol, qty=50000)  # 买入 symbol = 选中标的，直至持仓数达500股# 定时器，模拟盘响应；回测时可忽略def on_timer(api):    pass# 策略终止时响应；回测运行终止时会调用一次, exit_info返回值为终止消息def on_terminate(api, exit_info):    log.info("***************onTerminate*********")  # 输出日志