#!/usr/bin/env python# -*- coding: utf-8 -*-from etasdk import *'''期货策略：买卖策略本策略是一个简单的期货买卖策略，主要是体现期货简单买卖更多详情请看帮助文档：http://quant.upchina.com/doc/first.html'''from etasdk import *if __name__ == '__main__':    config = {        "host": "172.16.9.220",        "port": 80,        "user": "SDK-User",         # Web端：点击量化平台右上角用户名可查看填写        "passwd": "SDK-Token",          # Web端：点击量化平台右上角用户名可查看填写        "strategy_name": "buySellFutures",   # Web端：策略名称        "console": 0,        "loglevel": "ERROR",         # 显示日志级别，具体可查看帮助文档        "instance_id": "20180605-165138-917-002BI",    # Web端：回测记录中本策略的回测ID,点击复制ID,粘贴此处即可        # 初始化参数        "initialize": {            # symbols里设置单个股票或者其他有效的标的            # symbol_sets里设置标的集合，如此处的IF.PRD指的就是IF品种的所有标准合约，不包含IFZ0.CF和IFZ1.CF            # 注：symbols和symbol_sets不能全部为空            'symbols': ['IFZ0.CF'],            'symbol_sets': ['IF.PRD'],            # fields缓存的因子            # 'fields': ['FUT_TRADE_RANK', 'FUT_SHORT_RANK', 'FUT_LONG_RANK', 'STK_HOLD_DET', 'STK_HOLD_STAT', 'ST_STA','LIST_STA', 'TRADE_STA', 'NET_PROFIT', 'PB', 'PE', 'PS', 'PE_TTM'],            # 必填：设置所需k线类型，interval可以选取1分钟，5分钟，15分钟，30分钟，60分钟，日k，Tick级别，count为提前缓存的数目            'prepared_bars': [{'interval': ETimeSpan.MIN_5, 'count': 100}],            # 选填：设置撮合参数 interval为撮合周期，time_ranges为日内撮合时间段，将只在指定时间段以interval周期回调on_bar或on_handle_date            'match_param': {                'interval': ETimeSpan.MIN_5,                # 'time_ranges': [('12:00', '14:45'), ('10:10', '11:00')]            },            'mode': 'group_only',                       # 选填：为group_only，则只响应on_handle_data；为single_only，则只响应on_bar；为both，则两个回调同时响应            'commission': 0.0002,                       # 选填：设置手续费            # 选填：仅回测生效的项，不设置时以web页面上的设置为准            'backtest': {                'start_date': 20180102,                 # 回测开始日期                'end_date': 20181228,                   # 回测结束日期                'slippage': 1,                          # 设置滑点,取值为整数,标的价格浮动最小单位值的整数倍                # 设置账户初始资金                'cash': {                    'CS': 0,                            # 设置股票账户资金                    'CF': 1000000                      # 设置期货账户资金                }            },            # 选填：仅模拟盘/实盘生效的项            'realtime': {                'pre_market_time': '19:00',            # 设置开盘前回调on_before_market_open响应事件时间，默认为web页面上设置的时间                'closing_time': '14:55',               # 设置收盘前最后一次回调on_bar或on_handle_data响应事件时间，默认为web页面上设置的时间                'group_timeout': 10000,                # 设置group模式下的组播，等待多少ms则强制响应，默认为5000ms                'timer_cycle': 60000                   # 设置onTimer响应时间(ms), 为0则不响应onTimer，默认情况下不回调onTimer            }        }    }    etasdk.load_config_json(config).start()def on_before_market_open(api, date_now):    print(date_now.date)    """    必要：每个交易日回测/模拟/实盘前需要响应的事件    :param api:    :param trade_now:    :return:    """    api.futures_code = api.get_continuous_symbol("IFZ0.CF")  # 获得当前交易日IF主力合约代码    print(api.futures_code)    api.context.pool.focus = [api.futures_code, 'IFZ0.CF']def on_handle_data(api, time_now):    """    仅当mode为group_only和both时响应该事件    on_handle_data在Focus标的收齐时或者超时时响应    必要：每天回测/交易 策略 可选择两种方式  on_bar/on_handle_data    策略逻辑：如果价格低于前一日收盘价的0.2%则开多，止盈0.5%止损0.3%    :param api:    :param time_now: EtaTime    :return:    """    print('------------------%s-------------------' % time_now["%Y%m%d %H:%M"])    symbol_positions = api.get_symbol_positions()  # 获取持仓标的信息    bars = api.get_bars_history(symbol=api.futures_code, time_span=ETimeSpan.MIN_5, count=1,                              price_mode=EPriceMode.FORMER, skip_suspended=0)   # 获得合约当前bar数据    factor = bars['preClose'] / bars['open']  # 当前开盘价与昨日收盘价之比    # print(factor, bars['preClose'], bars['open'])    # print(symbol_positions)    if symbol_positions:  # 如果有持仓        if api.futures_code == symbol_positions[0].symbol:  # 当前持仓为主力合约            # 止盈0.3%止损0.5%            if symbol_positions[0].posHigh / symbol_positions[0].posPrice > 1.03 \                or symbol_positions[0].posLow / symbol_positions[0].posPrice < 0.95:                # 平仓                print(api.context.time.trade_now.date, "target position 0!")  # 录入日志                api.target_position(symbol=symbol_positions[0].symbol, qty=0,                                    side=EPositionSide.SHORT)  # 卖出 ，symbol = 持仓标的，数量变为0        # 当前持仓非主力合约 则换仓为主力合约        else:            print(api.context.time.trade_now.date, symbol_positions[0].symbol, "换合约", api.futures_code, )            api.target_position(symbol=symbol_positions[0].symbol, qty=0, side=EPositionSide.SHORT)            api.target_position(symbol=api.futures_code, qty=2, side=EPositionSide.SHORT)    else:        if factor[0] < 0.97:            print(api.context.time.trade_now.date, "target position 2")  # 非必要： 输出日志            api.target_position(symbol=api.futures_code, qty=2, side=EPositionSide.SHORT)  # 买入 symbol = 选中标的开空，直至持仓数达2手def on_timer(api):    """    定时器事件，模拟盘响应；回测时可忽略    :param api:    """def on_order_update(api, order):    """    订单更新事件    :param api:    :param order:    """def on_terminate(api, exit_info):    """    策略终止时响应；运行终止时会调用一次    :param api:    :param exit_info:终止消息    """    log.info("***************onTerminate*********")    # 输出日志    api.save_object('exit_info', api.props(exit_info))